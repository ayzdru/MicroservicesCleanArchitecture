@page "/"
@inject Product.ProductClient ProductClient
@inject IAccessTokenProvider AuthenticationService
@using Google.Protobuf.WellKnownTypes
@inject BasketState BasketState
@inject NavigationManager Navigation
@inject Basket.BasketClient BasketClient
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-columns">
        @foreach (var product in products)
        {
            <Card>

                <CardBody Padding="Padding.Is0">
                    <CardImage Source="https://picsum.photos/277/180" Alt="Placeholder image" Class="d-block w-100">
                    </CardImage>
                </CardBody>
                <CardFooter>
                    <CardTitle Size="5">
                        @product.Name - <small class="text-muted">@product.Price₺</small>
                    </CardTitle>
                    <CardText>
                        @product.Description
                    </CardText>
                    <Button Color="Color.Success" Clicked="(() => OnAddProductToBasketAsync(product.Id))">Add To Basket</Button>
                </CardFooter>
            </Card>
        }
    </div>
}
@code {
    private IList<ProductResponse>? products;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        products = (await ProductClient.GetProductsAsync(new Empty())).Products;



    }
    async  Task OnAddProductToBasketAsync(string productId)
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            var tokenResult = await AuthenticationService.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                var headers = new Metadata();
                headers.Add("Authorization", $"Bearer {token.Value}");
                var isAdded = await BasketClient.AddProductToBasketAsync(new BasketRequest() {ProductId = productId}, headers);
                if (isAdded.Value)
                {
                    BasketState.BasketItemsCount++;
                }
            }

        }
        else
        {
            Console.WriteLine("You're not logged in.");

            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }

    }

}
